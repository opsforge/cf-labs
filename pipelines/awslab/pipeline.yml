resources:

- name: cf-labs
  check_every: 30s
  type: git
  source:
    uri: {{cf_labs_git}}
    branch: {{cf_labs_git_branch}}
    
- name: cf-deployment
  check_every: 30s
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: master

- name: bosh-deployment
  check_every: 60s
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment.git
    branch: master

    # - name: terraform-state
    #   # Upped the freq to help with troubleshooting, feel free to drop
    #   check_every: 20s
    #   type: s3
    #   source:
    #     access_key_id: {{aws_tf_access_key}}
    #     secret_access_key: {{aws_tf_secret_key}}
    #     region: {{region}}
    #     bucket: {{s3_bucket}}
    #     # This doesn't work with a fixed filename for no good reason
    #     regexp: '(.*).tfstate'
    
- name: terraform-state
  check_every: 20s
  type: s3
  source:
    disable_ssl: false
    access_key_id: {{aws_tf_access_key}}
    secret_access_key: {{aws_tf_secret_key}}
    bucket: {{s3_bucket}}
    region_name: {{region}}
    versioned_file: terraform.tfstate
- name: bosh-creds
  check_every: 20s
  type: s3
  source:
    disable_ssl: false
    access_key_id: {{aws_tf_access_key}}
    secret_access_key: {{aws_tf_secret_key}}
    bucket: {{s3_bucket}}
    region_name: {{region}}
    versioned_file: creds.yml
- name: bosh-state
  check_every: 20s
  type: s3
  source:
    disable_ssl: false
    access_key_id: {{aws_tf_access_key}}
    secret_access_key: {{aws_tf_secret_key}}
    bucket: {{s3_bucket}}
    region_name: {{region}}
    versioned_file: state.json
- name: cf-vars
  check_every: 20s
  type: s3
  source:
    disable_ssl: false
    access_key_id: {{aws_tf_access_key}}
    secret_access_key: {{aws_tf_secret_key}}
    bucket: {{s3_bucket}}
    region_name: {{region}}
    versioned_file: deployment-vars.yml



jobs:





- name: bootstrap-terraform-state
  serial_groups: [terraform]
  plan:
  - get: cf-labs
    trigger: true
  - task: create-terraform-state
    params:
      S3_BUCKET_TERRAFORM: {{s3_bucket}}
      REGION: {{region}}
      AWS_ACCESS_KEY_ID: {{aws_tf_access_key}}
      AWS_SECRET_ACCESS_KEY: {{aws_tf_secret_key}}
    # This goes off and creates the tfstate (empty) and its bucket too if missing
    file: cf-labs/tasks/create-initial-terraform-state/task.yml

- name: pave-bosh-lite
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: cf-labs
    - get: terraform-state
      # Gets triggered by the terraform-state get because that only passes if bootstrap passed too
      # trigger: true
  - task: plan-terraform
    config: &tf_plan_block
      platform: linux
      inputs: &tf_inputs
        - name: cf-labs
        - name: terraform-state
      outputs:
        - name: plans
      image_resource: &standard_image
        type: docker-image
        source:
          repository: opsforge/concourse-tools
      run:
        path: sh
        args:
          - -exc
          - |
            cat terraform-state/terraform.tfstate &&
            terraform init cf-labs/pipelines/awslab/terraform &&
            terraform plan -state terraform-state/terraform.tfstate \
            -var 'ec2_key_pair_pub={{ec2_instance_key}}' \
            -var 'aws_access_key={{aws_tf_access_key}}' \
            -var 'aws_secret_key={{aws_tf_secret_key}}' \
            -out plans/terraform.tfplan \
            cf-labs/pipelines/awslab/terraform
  - task: apply-terraform
    config: &tf_apply_block
      platform: linux
      inputs:
        - name: cf-labs
        - name: plans
      outputs:
        - name: terraform-state-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            terraform init cf-labs/pipelines/awslab/terraform &&
            terraform apply -auto-approve \
            -state-out terraform-state-out/terraform.tfstate \
            plans/terraform.tfplan
    ensure: &tf_save_state
      put: terraform-state
      params:
        file: terraform-state-out/*.tfstate
        acl: private
- name: deploy-bosh-lite
  serial_groups: [bosh]
  plan:
  - aggregate:
    - get: cf-labs
    - get: terraform-state
      passed: [pave-bosh-lite]
      trigger: true
    - get: bosh-creds
    - get: bosh-state
    - get: bosh-deployment
      # Gets triggered by the terraform-state get because that only passes if bootstrap passed too
      # trigger: true
  - task: bosh-lite-configure
    config: &bosh_deploy
      platform: linux
      inputs: &bosh_input_files
        - name: cf-labs
        - name: terraform-state
        - name: bosh-deployment
        - name: bosh-creds
        - name: bosh-state
      outputs:
        - name: bosh-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            echo {{ec2_private_key}} > bosh.pem && chmod 0400 bosh.pem &&
            wget 'https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/master/aws/cpi.yml' &&
            sed -i 's/m4\.xlarge/t2\.xlarge/' cpi.yml &&
            bosh create-env bosh-deployment/bosh.yml \
            --state bosh-state/state.json \
            --vars-store bosh-creds/creds.yml \
            -o cpi.yml \
            -o bosh-deployment/bosh-lite.yml \
            -o bosh-deployment/bosh-lite-runc.yml \
            -o bosh-deployment/jumpbox-user.yml \
            -o bosh-deployment/external-ip-with-registry-not-recommended.yml \
            -v director_name=$(terraform output -state=terraform-state/terraform.tfstate bosh_name | sed 's/^.*=.//') \
            -v internal_cidr=$(terraform output -state=terraform-state/terraform.tfstate base_cidr | sed 's/^.*=.//') \
            -v internal_gw=$(terraform output -state=terraform-state/terraform.tfstate gw_ip | sed 's/^.*=.//') \
            -v internal_ip=$(terraform output -state=terraform-state/terraform.tfstate bosh_ip | sed 's/^.*=.//') \
            -v access_key_id={{aws_tf_access_key}} \
            -v secret_access_key=((aws_tf_secret_key)) \
            -v region=$(terraform output -state=terraform-state/terraform.tfstate region | sed 's/^.*=.//') \
            -v az=$(terraform output -state=terraform-state/terraform.tfstate az | sed 's/^.*=.//') \
            -v default_key_name=$(terraform output -state=terraform-state/terraform.tfstate ec2_keyname | sed 's/^.*=.//') \
            -v default_security_groups=[$(terraform output -state=terraform-state/terraform.tfstate ec2_secgroup | sed 's/^.*=.//')] \
            --var-file private_key=bosh.pem \
            -v subnet_id=$(terraform output -state=terraform-state/terraform.tfstate base_subnet | sed 's/^.*=.//') \
            -v external_ip=$(terraform output -state=terraform-state/terraform.tfstate bosh_eip | sed 's/^.*=.//') &&
            cp bosh-state/state.json bosh-out/state.json &&
            cp bosh-creds/creds.yml bosh-out/creds.yml
    ensure: &bosh_save_files
      do:
        - put: bosh-creds
          params:
            file: bosh-out/creds.yml
            acl: private
        - put: bosh-state
          params:
            file: bosh-out/state.json
            acl: private









- name: cf-deploy
  serial_groups: [cf]
  plan:
  - aggregate:
    - get: cf-deployment
    - get: cf-labs
    - get: terraform-state
      passed: [deploy-bosh-lite]
      trigger: true
    - get: bosh-creds
    - get: bosh-state
    - get: bosh-deployment
    - get: cf-vars
      # Gets triggered by the terraform-state get because that only passes if bootstrap passed too
      # trigger: true
  - task: cf-lite-setup
    config: &bosh_deploy
      platform: linux
      inputs: &cf_input_files
        - name: cf-deployment
        - name: cf-labs
        - name: terraform-state
        - name: bosh-deployment
        - name: bosh-creds
        - name: bosh-state
        - name: cf-vars
      outputs:
        - name: cf-vars-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            export BOSH_PUBLIC_IP=$(terraform output -state=terraform-state/terraform.tfstate bosh_eip | sed 's/^.*=.//') &&
            bosh int bosh-creds/creds.yml --path /director_ssl/ca > ca.pem && chmod 0400 ca.pem &&
            bosh alias-env bosh-lite \
            -e $BOSH_PUBLIC_IP \
            --ca-cert ca.pem &&
            export BOSH_CLIENT=admin &&
            export BOSH_CLIENT_SECRET=$(bosh int bosh-creds/creds.yml --path /admin_password) &&
            export BOSH_ENVIRONMENT="$BOSH_PUBLIC_IP"
            # export BOSH_ENVIRONMENT=$(terraform output -state=terraform-state/terraform.tfstate bosh_ip | sed 's/^.*=.//') &&
            export BOSH_CA_CERT="$(bosh int bosh-creds/creds.yml --path /director_ssl/ca)" &&
            # bosh int bosh-creds/creds.yml --path=/jumpbox_ssh/private_key  > jumpbox.key &&
            # chmod 0400 jumpbox.key &&
            # ssh -4 -D 5000 -fNC jumpbox@$BOSH_PUBLIC_IP -i jumpbox.key &&
            # export BOSH_ALL_PROXY=socks5://localhost:5000 &&
            bosh -e bosh-lite update-cloud-config cf-deployment/iaas-support/bosh-lite/cloud-config.yml -n &&
            bosh int bosh-deployment/runtime-configs/dns.yml --vars-store deployment-vars.yml > dns.yml
            bosh update-runtime-config dns.yml --name dns -n &&
            bosh upload-stemcell https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-xenial-go_agent?v=621.55 &&
            echo "
            THIS WILL TAKE FOREVER, PLEASE WAIT
            " &&
            bosh -e bosh-lite -d cf deploy cf-deployment/cf-deployment.yml -o cf-deployment/operations/bosh-lite.yml --vars-store deployment-vars.yml -v system_domain=cf.{{system_domain}} -n &&
            echo "
            HOPEFULLY THATS CF LITE DEPLOYED, BUT LETS MAKE SURE...
            " &&
            bosh -e bosh-lite -d cf vms &&
            bosh -e bosh-lite -d cf cloud-check &&
            cp deployment-vars.yml cf-vars-out/deployment-vars.yml &&
            CF_ADMIN_PASS=$(bosh int cf-vars-out/deployment-vars.yml --path /cf_admin_password)
            echo "CF API: $SYS_DOMAIN"
            echo "CF ADMIN PASS: $CF_ADMIN_PASS"
    ensure: &cf_var_save
      do:
        - put: cf-vars
          params:
            file: cf-vars-out/deployment-vars.yml
            acl: private
- name: cf-ui-deploy
  serial_groups: [cf]
  plan:
  - aggregate:
    - get: terraform-state
    - get: cf-vars
      passed: [cf-deploy]
      trigger: true
  - task: stratos-setup
    config: 
      platform: linux
      inputs:
        - name: terraform-state
        - name: cf-vars
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            CF_ADMIN_PASS=$(bosh int cf-vars/deployment-vars.yml --path /cf_admin_password) &&
            export BOSH_PUBLIC_IP=$(terraform output -state=terraform-state/terraform.tfstate bosh_eip | sed 's/^.*=.//') &&
            cf login --skip-ssl-validation -a api.$BOSH_PUBLIC_IP.sslip.io -u admin -p $CF_ADMIN_PASS -o system &&
            cf enable-feature-flag diego_docker
            cf create-org cfui
            cf target -o cfui &&
            cf create-space prod
            cf target -o cfui -s prod &&
            cf push console -o splatform/stratos:latest -m 128M -k 384M











- name: nuke-bosh-lite
  serial_groups: [bosh]
  plan:
  - aggregate:
    - get: cf-labs
    - get: terraform-state
      passed: [deploy-bosh-lite]
      # trigger: true
    - get: bosh-creds
    - get: bosh-state
    - get: bosh-deployment
      # Gets triggered by the terraform-state get because that only passes if bootstrap passed too
      # trigger: true
  - task: bosh-lite-destroy
    config:
      platform: linux
      inputs: *bosh_input_files
      outputs:
        - name: bosh-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            echo {{ec2_private_key}} > bosh.pem && chmod 0400 bosh.pem &&
            wget 'https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/master/aws/cpi.yml' &&
            sed -i 's/m4\.xlarge/t2\.xlarge/' cpi.yml &&
            bosh delete-env bosh-deployment/bosh.yml \
            --state bosh-state/state.json \
            --vars-store bosh-creds/creds.yml \
            -o cpi.yml \
            -o bosh-deployment/bosh-lite.yml \
            -o bosh-deployment/bosh-lite-runc.yml \
            -o bosh-deployment/jumpbox-user.yml \
            -o bosh-deployment/external-ip-with-registry-not-recommended.yml \
            -v director_name=$(terraform output -state=terraform-state/terraform.tfstate bosh_name | sed 's/^.*=.//') \
            -v internal_cidr=$(terraform output -state=terraform-state/terraform.tfstate base_cidr | sed 's/^.*=.//') \
            -v internal_gw=$(terraform output -state=terraform-state/terraform.tfstate gw_ip | sed 's/^.*=.//') \
            -v internal_ip=$(terraform output -state=terraform-state/terraform.tfstate bosh_ip | sed 's/^.*=.//') \
            -v access_key_id={{aws_tf_access_key}} \
            -v secret_access_key={{aws_tf_secret_key}} \
            -v region=$(terraform output -state=terraform-state/terraform.tfstate region | sed 's/^.*=.//') \
            -v az=$(terraform output -state=terraform-state/terraform.tfstate az | sed 's/^.*=.//') \
            -v default_key_name=$(terraform output -state=terraform-state/terraform.tfstate ec2_keyname | sed 's/^.*=.//') \
            -v default_security_groups=[$(terraform output -state=terraform-state/terraform.tfstate ec2_secgroup | sed 's/^.*=.//')] \
            --var-file private_key=bosh.pem \
            -v subnet_id=$(terraform output -state=terraform-state/terraform.tfstate base_subnet | sed 's/^.*=.//') \
            -v external_ip=$(terraform output -state=terraform-state/terraform.tfstate bosh_eip | sed 's/^.*=.//') &&
            echo "---" > creds.yml &&
            echo "{}" > state.json &&
            cp state.json bosh-out/state.json &&
            cp creds.yml bosh-out/creds.yml
    ensure: *bosh_save_files
- name: wipe-terraform
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: cf-labs
    - get: terraform-state
  # - task: plan-terraform
  #   config: *tf_plan_block
  - task: wipe-terraform
    config: &tf_wipe_block
      platform: linux
      inputs: *tf_inputs
      outputs:
        - name: terraform-state-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            cat terraform-state/terraform.tfstate &&
            terraform init cf-labs/pipelines/awslab/terraform &&
            terraform destroy -force -state terraform-state/terraform.tfstate \
            -var 'ec2_key_pair_pub={{ec2_instance_key}}' \
            -var 'aws_access_key={{aws_tf_access_key}}' \
            -var 'aws_secret_key={{aws_tf_secret_key}}' \
            -state-out terraform-state-out/terraform.tfstate \
            cf-labs/pipelines/awslab/terraform
    ensure: *tf_save_state
